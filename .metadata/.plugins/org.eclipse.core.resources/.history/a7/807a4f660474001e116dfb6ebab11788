package Task2;

public class MyLinkedList {
    public class Node<E> {
        E data;
        Node<E> next;

        /**
         * Creates a new node with the given data.
         *
         * @param data the data to store in the node
         */
        public Node(E data) {
            this.data = data;
        }

        /**
         * Returns the data stored in the node.
         *
         * @return the data stored in the node
         */
        public E getData() {
            return data;
        }

        /**
         * Sets the data stored in the node.
         *
         * @param data the new data to store in the node
         */
        public void setData(E data) {
            this.data = data;
        }

        /**
         * Returns the next node in the linked list.
         *
         * @return the next node in the linked list, or `null` if there is no next node
         */
        public Node<E> getNext() {
            return next;
        }

        /**
         * Sets the next node in the linked list.
         *
         * @param next the next node in the linked list
         */
        public void setNext(Node<E> next) {
            this.next = next;
        }

        /**
         * Returns a string representation of the node.
         *
         * @return a string representation of the node
         */
        @Override
        public String toString() {
            return data.toString();
        }

        /**
         * Compares two nodes for equality.
         *
         * @param other the other node to compare to
         * @return `true` if the two nodes are equal, `false` otherwise
         */
        @Override
        public boolean equals(Object other) {
            if (other == this) {
                return true;
            }
            if (other == null || getClass() != other.getClass()) {
                return false;
            }
            Node<E> otherNode = (Node<E>) other;
            return data.equals(otherNode.data) && next == otherNode.next;
        }

        /**
         * Calculates a hash code for the node.
         *
         * @return a hash code for the node
         */
        @Override
        public int hashCode() {
            return Objects.hash(data, next);
        }
    }
}
